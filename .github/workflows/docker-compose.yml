name: Deploy front

on:
  push:
    branches: [ "master" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER_DEV }}
          password: ${{ secrets.DOCKER_PASSWORD_DEV }}
      - name: Build Docker image
        run: docker build -t ${{secrets.DOCKER_REPO_DEV}} .
      - name: Push Docker image
        run: docker push ${{secrets.DOCKER_REPO_DEV}}

  deploy-test:
    runs-on: ubuntu-latest

    needs: [build-and-push]

    steps:
      - name: deploying
        if: contains(github.event.head_commit.message, '--deploy-test')
        run: |
          which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
          mkdir -p ~/.ssh
          echo "${{secrets.SSH_PRIVATE_KEY}}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 700 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ secrets.SERVER }} > ~/.ssh/known_hosts
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          chmod 644 ~/.ssh/known_hosts
          ssh ${{secrets.SERVER_USERNAME}}@${{secrets.SERVER}} "cd ~/apps/reports;git clone https://github.com/Wooper1000/pet-project;cp ./prod-conf/.env.local ./pet-project;cd ./pet-project;docker build . -t front-app;docker login -u ${{secrets.DOCKER_USER_DEV}} -p ${{secrets.DOCKER_PASSWORD_DEV}} docker.io; docker stop ${{secrets.DEV_APP_NAME}}; docker system prune -a -f; docker pull ${{secrets.DOCKER_REPO_DEV}}:latest; docker-compose -f ~/apps/reports/docker-compose.yml up -d; docker logout"
  deploy-prod:
    runs-on: ubuntu-latest

    needs: [build-and-push]

    steps:
      - name: deploying
        if: contains(github.event.head_commit.message, '--deploy-prod')
        run: |
          which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
          mkdir -p ~/.ssh
          echo "${{secrets.SSH_PRIVATE_KEY_PROD}}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 700 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ secrets.SERVER_PROD }} > ~/.ssh/known_hosts
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          chmod 644 ~/.ssh/known_hosts
          ssh ${{secrets.SERVER_USERNAME_PROD}}@${{secrets.SERVER_PROD}} "docker login -u ${{secrets.DOCKER_USER_DEV}} -p ${{secrets.DOCKER_PASSWORD_DEV}} docker.io; docker stop ${{secrets.DEV_APP_NAME}}; docker system prune -a -f; docker pull ${{secrets.DOCKER_REPO_DEV}}:latest; docker-compose -f ~/apps/electron/docker-compose-front.yml up -d; docker logout"
